//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/PlayerControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControl"",
    ""maps"": [
        {
            ""name"": ""Humanoid"",
            ""id"": ""d4cb7394-d366-484d-b565-d5eaafb85984"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""210f4a83-1606-4821-9966-f0ea902860f4"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""f20b5861-2006-4a87-bab3-217d8825779b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""9dcc2070-2ecb-4796-bb5b-4c3db8725004"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItem"",
                    ""type"": ""Button"",
                    ""id"": ""9c158c34-07f6-4625-987a-39ce9b46abc1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""UseItemAlt"",
                    ""type"": ""Button"",
                    ""id"": ""cec67515-b687-4c1d-a6e7-e4f4fbdbfc39"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""f9368168-4012-471a-a690-27db8173e3ec"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlayDead"",
                    ""type"": ""Button"",
                    ""id"": ""941a79b5-1ec9-4e78-b30b-1bb1fd76715a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ToggleUI"",
                    ""type"": ""Button"",
                    ""id"": ""8495db2c-2407-40f7-bc15-ca4db71b3e77"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""ae6f64b6-5c61-4c40-af8d-e5ecffeaa37e"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0c282484-9f81-4016-bf8d-e5b7eb07367b"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3a7f2b17-f212-4a07-bf3a-29c29df6d1a7"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""34eb88c3-7906-41f1-b826-575bc9efde18"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""97bab691-d071-4ebc-8ee2-d11925c28bf9"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""4ae56580-c8af-4039-a4e4-6ce35660e9c6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""42ee7296-2086-4ecc-93dd-c6e9aa214437"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f93982a-faaa-4694-bd33-0b165783babc"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32237bf6-d3bd-42d1-9376-ffc0bca98a66"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""UseItem"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a92a1403-9909-4b64-9217-08a6b156cbe2"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlayDead"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2cafb7b5-c0f2-4a0d-9e5d-6e0f8c9d8cac"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""UseItemAlt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa5f2690-9416-4f96-9f81-13d89bbcd067"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleUI"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Humanoid
        m_Humanoid = asset.FindActionMap("Humanoid", throwIfNotFound: true);
        m_Humanoid_Move = m_Humanoid.FindAction("Move", throwIfNotFound: true);
        m_Humanoid_Jump = m_Humanoid.FindAction("Jump", throwIfNotFound: true);
        m_Humanoid_Interact = m_Humanoid.FindAction("Interact", throwIfNotFound: true);
        m_Humanoid_UseItem = m_Humanoid.FindAction("UseItem", throwIfNotFound: true);
        m_Humanoid_UseItemAlt = m_Humanoid.FindAction("UseItemAlt", throwIfNotFound: true);
        m_Humanoid_Scroll = m_Humanoid.FindAction("Scroll", throwIfNotFound: true);
        m_Humanoid_PlayDead = m_Humanoid.FindAction("PlayDead", throwIfNotFound: true);
        m_Humanoid_ToggleUI = m_Humanoid.FindAction("ToggleUI", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Humanoid
    private readonly InputActionMap m_Humanoid;
    private IHumanoidActions m_HumanoidActionsCallbackInterface;
    private readonly InputAction m_Humanoid_Move;
    private readonly InputAction m_Humanoid_Jump;
    private readonly InputAction m_Humanoid_Interact;
    private readonly InputAction m_Humanoid_UseItem;
    private readonly InputAction m_Humanoid_UseItemAlt;
    private readonly InputAction m_Humanoid_Scroll;
    private readonly InputAction m_Humanoid_PlayDead;
    private readonly InputAction m_Humanoid_ToggleUI;
    public struct HumanoidActions
    {
        private @PlayerControl m_Wrapper;
        public HumanoidActions(@PlayerControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Humanoid_Move;
        public InputAction @Jump => m_Wrapper.m_Humanoid_Jump;
        public InputAction @Interact => m_Wrapper.m_Humanoid_Interact;
        public InputAction @UseItem => m_Wrapper.m_Humanoid_UseItem;
        public InputAction @UseItemAlt => m_Wrapper.m_Humanoid_UseItemAlt;
        public InputAction @Scroll => m_Wrapper.m_Humanoid_Scroll;
        public InputAction @PlayDead => m_Wrapper.m_Humanoid_PlayDead;
        public InputAction @ToggleUI => m_Wrapper.m_Humanoid_ToggleUI;
        public InputActionMap Get() { return m_Wrapper.m_Humanoid; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HumanoidActions set) { return set.Get(); }
        public void SetCallbacks(IHumanoidActions instance)
        {
            if (m_Wrapper.m_HumanoidActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnJump;
                @Interact.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnInteract;
                @UseItem.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnUseItem;
                @UseItem.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnUseItem;
                @UseItem.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnUseItem;
                @UseItemAlt.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnUseItemAlt;
                @UseItemAlt.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnUseItemAlt;
                @UseItemAlt.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnUseItemAlt;
                @Scroll.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnScroll;
                @Scroll.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnScroll;
                @Scroll.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnScroll;
                @PlayDead.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnPlayDead;
                @PlayDead.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnPlayDead;
                @PlayDead.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnPlayDead;
                @ToggleUI.started -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnToggleUI;
                @ToggleUI.performed -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnToggleUI;
                @ToggleUI.canceled -= m_Wrapper.m_HumanoidActionsCallbackInterface.OnToggleUI;
            }
            m_Wrapper.m_HumanoidActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @UseItem.started += instance.OnUseItem;
                @UseItem.performed += instance.OnUseItem;
                @UseItem.canceled += instance.OnUseItem;
                @UseItemAlt.started += instance.OnUseItemAlt;
                @UseItemAlt.performed += instance.OnUseItemAlt;
                @UseItemAlt.canceled += instance.OnUseItemAlt;
                @Scroll.started += instance.OnScroll;
                @Scroll.performed += instance.OnScroll;
                @Scroll.canceled += instance.OnScroll;
                @PlayDead.started += instance.OnPlayDead;
                @PlayDead.performed += instance.OnPlayDead;
                @PlayDead.canceled += instance.OnPlayDead;
                @ToggleUI.started += instance.OnToggleUI;
                @ToggleUI.performed += instance.OnToggleUI;
                @ToggleUI.canceled += instance.OnToggleUI;
            }
        }
    }
    public HumanoidActions @Humanoid => new HumanoidActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IHumanoidActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnUseItem(InputAction.CallbackContext context);
        void OnUseItemAlt(InputAction.CallbackContext context);
        void OnScroll(InputAction.CallbackContext context);
        void OnPlayDead(InputAction.CallbackContext context);
        void OnToggleUI(InputAction.CallbackContext context);
    }
}
